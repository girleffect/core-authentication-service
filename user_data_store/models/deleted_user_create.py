# coding: utf-8

"""
    User Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeletedUserCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'username': 'str',
        'email': 'str',
        'msisdn': 'str',
        'reason': 'str',
        'deleter_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'email': 'email',
        'msisdn': 'msisdn',
        'reason': 'reason',
        'deleter_id': 'deleter_id'
    }

    def __init__(self, id=None, username=None, email=None, msisdn=None, reason=None, deleter_id=None):  # noqa: E501
        """DeletedUserCreate - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._username = None
        self._email = None
        self._msisdn = None
        self._reason = None
        self._deleter_id = None
        self.discriminator = None

        self.id = id
        self.username = username
        if email is not None:
            self.email = email
        if msisdn is not None:
            self.msisdn = msisdn
        self.reason = reason
        self.deleter_id = deleter_id

    @property
    def id(self):
        """Gets the id of this DeletedUserCreate.  # noqa: E501


        :return: The id of this DeletedUserCreate.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeletedUserCreate.


        :param id: The id of this DeletedUserCreate.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def username(self):
        """Gets the username of this DeletedUserCreate.  # noqa: E501


        :return: The username of this DeletedUserCreate.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DeletedUserCreate.


        :param username: The username of this DeletedUserCreate.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def email(self):
        """Gets the email of this DeletedUserCreate.  # noqa: E501


        :return: The email of this DeletedUserCreate.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DeletedUserCreate.


        :param email: The email of this DeletedUserCreate.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def msisdn(self):
        """Gets the msisdn of this DeletedUserCreate.  # noqa: E501


        :return: The msisdn of this DeletedUserCreate.  # noqa: E501
        :rtype: str
        """
        return self._msisdn

    @msisdn.setter
    def msisdn(self, msisdn):
        """Sets the msisdn of this DeletedUserCreate.


        :param msisdn: The msisdn of this DeletedUserCreate.  # noqa: E501
        :type: str
        """

        self._msisdn = msisdn

    @property
    def reason(self):
        """Gets the reason of this DeletedUserCreate.  # noqa: E501


        :return: The reason of this DeletedUserCreate.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this DeletedUserCreate.


        :param reason: The reason of this DeletedUserCreate.  # noqa: E501
        :type: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    @property
    def deleter_id(self):
        """Gets the deleter_id of this DeletedUserCreate.  # noqa: E501


        :return: The deleter_id of this DeletedUserCreate.  # noqa: E501
        :rtype: str
        """
        return self._deleter_id

    @deleter_id.setter
    def deleter_id(self, deleter_id):
        """Sets the deleter_id of this DeletedUserCreate.


        :param deleter_id: The deleter_id of this DeletedUserCreate.  # noqa: E501
        :type: str
        """
        if deleter_id is None:
            raise ValueError("Invalid value for `deleter_id`, must not be `None`")  # noqa: E501

        self._deleter_id = deleter_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeletedUserCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Access Control API

    # The Access Control API  ## Overview The Access Control API is an API exposed to other core components. It uses an API Key in an HTTP header to perform authentication and authorisation.  Most of the API calls facilitates CRUD of the entities defined in the Access Control component. Others calls allows the retrieval of information in a form that is convenient for other components (most notably the Management Layer) to consume.   # noqa: E501

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from access_control.api_client import ApiClient


class AccessControlApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def access_control_roleresourcepermission_delete(self, role_id, resource_id, permission_id, **kwargs):  # noqa: E501
        """access_control_roleresourcepermission_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.access_control_roleresourcepermission_delete(role_id, resource_id, permission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: A unique integer value identifying the role. (required)
        :param int resource_id: A unique integer value identifying the resource. (required)
        :param int permission_id: A unique integer value identifying the permission. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.access_control_roleresourcepermission_delete_with_http_info(role_id, resource_id, permission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.access_control_roleresourcepermission_delete_with_http_info(role_id, resource_id, permission_id, **kwargs)  # noqa: E501
            return data

    def access_control_roleresourcepermission_delete_with_http_info(self, role_id, resource_id, permission_id, **kwargs):  # noqa: E501
        """access_control_roleresourcepermission_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.access_control_roleresourcepermission_delete_with_http_info(role_id, resource_id, permission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: A unique integer value identifying the role. (required)
        :param int resource_id: A unique integer value identifying the resource. (required)
        :param int permission_id: A unique integer value identifying the permission. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id', 'resource_id', 'permission_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_control_roleresourcepermission_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `access_control_roleresourcepermission_delete`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params or
                params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `access_control_roleresourcepermission_delete`")  # noqa: E501
        # verify the required parameter 'permission_id' is set
        if ('permission_id' not in params or
                params['permission_id'] is None):
            raise ValueError("Missing the required parameter `permission_id` when calling `access_control_roleresourcepermission_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501
        if 'resource_id' in params:
            path_params['resource_id'] = params['resource_id']  # noqa: E501
        if 'permission_id' in params:
            path_params['permission_id'] = params['permission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/roleresourcepermissions/{role_id}/{resource_id}/{permission_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domain_create(self, **kwargs):  # noqa: E501
        """domain_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param DomainCreate data:
        :return: Domain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.domain_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.domain_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def domain_create_with_http_info(self, **kwargs):  # noqa: E501
        """domain_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param DomainCreate data:
        :return: Domain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domain_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/domains', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Domain',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domain_delete(self, domain_id, **kwargs):  # noqa: E501
        """domain_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_delete(domain_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int domain_id: A unique integer value identifying the domain. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.domain_delete_with_http_info(domain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.domain_delete_with_http_info(domain_id, **kwargs)  # noqa: E501
            return data

    def domain_delete_with_http_info(self, domain_id, **kwargs):  # noqa: E501
        """domain_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_delete_with_http_info(domain_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int domain_id: A unique integer value identifying the domain. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domain_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `domain_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_id' in params:
            path_params['domain_id'] = params['domain_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/domains/{domain_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domain_list(self, **kwargs):  # noqa: E501
        """domain_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param list[int] domain_ids: An optional list of domain ids
        :return: list[Domain]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.domain_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.domain_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def domain_list_with_http_info(self, **kwargs):  # noqa: E501
        """domain_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param list[int] domain_ids: An optional list of domain ids
        :return: list[Domain]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'domain_ids']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domain_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `domain_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `domain_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `domain_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if ('domain_ids' in params and
                len(params['domain_ids']) < 0):
            raise ValueError("Invalid value for parameter `domain_ids` when calling `domain_list`, number of items must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'domain_ids' in params:
            query_params.append(('domain_ids', params['domain_ids']))  # noqa: E501
            collection_formats['domain_ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/domains', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Domain]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domain_read(self, domain_id, **kwargs):  # noqa: E501
        """domain_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_read(domain_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int domain_id: A unique integer value identifying the domain. (required)
        :return: Domain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.domain_read_with_http_info(domain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.domain_read_with_http_info(domain_id, **kwargs)  # noqa: E501
            return data

    def domain_read_with_http_info(self, domain_id, **kwargs):  # noqa: E501
        """domain_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_read_with_http_info(domain_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int domain_id: A unique integer value identifying the domain. (required)
        :return: Domain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domain_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `domain_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_id' in params:
            path_params['domain_id'] = params['domain_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/domains/{domain_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Domain',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domain_update(self, domain_id, **kwargs):  # noqa: E501
        """domain_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_update(domain_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param DomainUpdate data:
        :return: Domain
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.domain_update_with_http_info(domain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.domain_update_with_http_info(domain_id, **kwargs)  # noqa: E501
            return data

    def domain_update_with_http_info(self, domain_id, **kwargs):  # noqa: E501
        """domain_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domain_update_with_http_info(domain_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param DomainUpdate data:
        :return: Domain
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domain_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `domain_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_id' in params:
            path_params['domain_id'] = params['domain_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/domains/{domain_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Domain',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domainrole_create(self, **kwargs):  # noqa: E501
        """domainrole_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domainrole_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param DomainRoleCreate data:
        :return: DomainRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.domainrole_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.domainrole_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def domainrole_create_with_http_info(self, **kwargs):  # noqa: E501
        """domainrole_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domainrole_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param DomainRoleCreate data:
        :return: DomainRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domainrole_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/domainroles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainRole',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domainrole_delete(self, domain_id, role_id, **kwargs):  # noqa: E501
        """domainrole_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domainrole_delete(domain_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.domainrole_delete_with_http_info(domain_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.domainrole_delete_with_http_info(domain_id, role_id, **kwargs)  # noqa: E501
            return data

    def domainrole_delete_with_http_info(self, domain_id, role_id, **kwargs):  # noqa: E501
        """domainrole_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domainrole_delete_with_http_info(domain_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domainrole_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `domainrole_delete`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `domainrole_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_id' in params:
            path_params['domain_id'] = params['domain_id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/domainroles/{domain_id}/{role_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domainrole_list(self, **kwargs):  # noqa: E501
        """domainrole_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domainrole_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param int domain_id: An optional query parameter to filter by domain_id
        :param int role_id: An optional query parameter to filter by role_id
        :return: list[DomainRole]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.domainrole_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.domainrole_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def domainrole_list_with_http_info(self, **kwargs):  # noqa: E501
        """domainrole_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domainrole_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param int domain_id: An optional query parameter to filter by domain_id
        :param int role_id: An optional query parameter to filter by role_id
        :return: list[DomainRole]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'domain_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domainrole_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `domainrole_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `domainrole_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `domainrole_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'domain_id' in params:
            query_params.append(('domain_id', params['domain_id']))  # noqa: E501
        if 'role_id' in params:
            query_params.append(('role_id', params['role_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/domainroles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DomainRole]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domainrole_read(self, domain_id, role_id, **kwargs):  # noqa: E501
        """domainrole_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domainrole_read(domain_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: DomainRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.domainrole_read_with_http_info(domain_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.domainrole_read_with_http_info(domain_id, role_id, **kwargs)  # noqa: E501
            return data

    def domainrole_read_with_http_info(self, domain_id, role_id, **kwargs):  # noqa: E501
        """domainrole_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domainrole_read_with_http_info(domain_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: DomainRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domainrole_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `domainrole_read`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `domainrole_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_id' in params:
            path_params['domain_id'] = params['domain_id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/domainroles/{domain_id}/{role_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainRole',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def domainrole_update(self, domain_id, role_id, **kwargs):  # noqa: E501
        """domainrole_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domainrole_update(domain_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :param DomainRoleUpdate data:
        :return: DomainRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.domainrole_update_with_http_info(domain_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.domainrole_update_with_http_info(domain_id, role_id, **kwargs)  # noqa: E501
            return data

    def domainrole_update_with_http_info(self, domain_id, role_id, **kwargs):  # noqa: E501
        """domainrole_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.domainrole_update_with_http_info(domain_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :param DomainRoleUpdate data:
        :return: DomainRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['domain_id', 'role_id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method domainrole_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `domainrole_update`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `domainrole_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'domain_id' in params:
            path_params['domain_id'] = params['domain_id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/domainroles/{domain_id}/{role_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DomainRole',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitation_create(self, **kwargs):  # noqa: E501
        """invitation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitation_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param InvitationCreate data:
        :return: Invitation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invitation_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.invitation_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def invitation_create_with_http_info(self, **kwargs):  # noqa: E501
        """invitation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitation_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param InvitationCreate data:
        :return: Invitation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitation_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/invitations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Invitation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitation_delete(self, invitation_id, **kwargs):  # noqa: E501
        """invitation_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitation_delete(invitation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invitation_delete_with_http_info(invitation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.invitation_delete_with_http_info(invitation_id, **kwargs)  # noqa: E501
            return data

    def invitation_delete_with_http_info(self, invitation_id, **kwargs):  # noqa: E501
        """invitation_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitation_delete_with_http_info(invitation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitation_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `invitation_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitation_id'] = params['invitation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/{invitation_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitation_list(self, **kwargs):  # noqa: E501
        """invitation_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitation_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str invitor_id: Optional filter based on the invitor (the user who created the invitation)
        :param list[str] invitation_ids: An optional list of invitation ids
        :return: list[Invitation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invitation_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.invitation_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def invitation_list_with_http_info(self, **kwargs):  # noqa: E501
        """invitation_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitation_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str invitor_id: Optional filter based on the invitor (the user who created the invitation)
        :param list[str] invitation_ids: An optional list of invitation ids
        :return: list[Invitation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'invitor_id', 'invitation_ids']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitation_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `invitation_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `invitation_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `invitation_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if ('invitation_ids' in params and
                len(params['invitation_ids']) < 0):
            raise ValueError("Invalid value for parameter `invitation_ids` when calling `invitation_list`, number of items must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'invitor_id' in params:
            query_params.append(('invitor_id', params['invitor_id']))  # noqa: E501
        if 'invitation_ids' in params:
            query_params.append(('invitation_ids', params['invitation_ids']))  # noqa: E501
            collection_formats['invitation_ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/invitations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Invitation]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitation_read(self, invitation_id, **kwargs):  # noqa: E501
        """invitation_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitation_read(invitation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :return: Invitation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invitation_read_with_http_info(invitation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.invitation_read_with_http_info(invitation_id, **kwargs)  # noqa: E501
            return data

    def invitation_read_with_http_info(self, invitation_id, **kwargs):  # noqa: E501
        """invitation_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitation_read_with_http_info(invitation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :return: Invitation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitation_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `invitation_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitation_id'] = params['invitation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/{invitation_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Invitation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitation_redeem(self, invitation_id, user_id, **kwargs):  # noqa: E501
        """invitation_redeem  # noqa: E501

        Assign all roles assigned to the invitation to the specified user, removing the invitation and related configuration when done. Note: We may have to change the role assignment to an asynchronous task depending on the complexity of the implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitation_redeem(invitation_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :param str user_id: A UUID value identifying the user. (required)
        :return: AllUserRoles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invitation_redeem_with_http_info(invitation_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.invitation_redeem_with_http_info(invitation_id, user_id, **kwargs)  # noqa: E501
            return data

    def invitation_redeem_with_http_info(self, invitation_id, user_id, **kwargs):  # noqa: E501
        """invitation_redeem  # noqa: E501

        Assign all roles assigned to the invitation to the specified user, removing the invitation and related configuration when done. Note: We may have to change the role assignment to an asynchronous task depending on the complexity of the implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitation_redeem_with_http_info(invitation_id, user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :param str user_id: A UUID value identifying the user. (required)
        :return: AllUserRoles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'user_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitation_redeem" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `invitation_redeem`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `invitation_redeem`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitation_id'] = params['invitation_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/{invitation_id}/redeem/{user_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllUserRoles',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitation_update(self, invitation_id, **kwargs):  # noqa: E501
        """invitation_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitation_update(invitation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :param InvitationUpdate data:
        :return: Invitation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invitation_update_with_http_info(invitation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.invitation_update_with_http_info(invitation_id, **kwargs)  # noqa: E501
            return data

    def invitation_update_with_http_info(self, invitation_id, **kwargs):  # noqa: E501
        """invitation_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitation_update_with_http_info(invitation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :param InvitationUpdate data:
        :return: Invitation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitation_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `invitation_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitation_id'] = params['invitation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/{invitation_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Invitation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitationdomainrole_create(self, **kwargs):  # noqa: E501
        """invitationdomainrole_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationdomainrole_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param InvitationDomainRoleCreate data:
        :return: InvitationDomainRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invitationdomainrole_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.invitationdomainrole_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def invitationdomainrole_create_with_http_info(self, **kwargs):  # noqa: E501
        """invitationdomainrole_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationdomainrole_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param InvitationDomainRoleCreate data:
        :return: InvitationDomainRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitationdomainrole_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/invitationdomainroles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvitationDomainRole',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitationdomainrole_delete(self, invitation_id, domain_id, role_id, **kwargs):  # noqa: E501
        """invitationdomainrole_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationdomainrole_delete(invitation_id, domain_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invitationdomainrole_delete_with_http_info(invitation_id, domain_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.invitationdomainrole_delete_with_http_info(invitation_id, domain_id, role_id, **kwargs)  # noqa: E501
            return data

    def invitationdomainrole_delete_with_http_info(self, invitation_id, domain_id, role_id, **kwargs):  # noqa: E501
        """invitationdomainrole_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationdomainrole_delete_with_http_info(invitation_id, domain_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'domain_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitationdomainrole_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `invitationdomainrole_delete`")  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `invitationdomainrole_delete`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `invitationdomainrole_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitation_id'] = params['invitation_id']  # noqa: E501
        if 'domain_id' in params:
            path_params['domain_id'] = params['domain_id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/invitationdomainroles/{invitation_id}/{domain_id}/{role_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitationdomainrole_list(self, **kwargs):  # noqa: E501
        """invitationdomainrole_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationdomainrole_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str invitation_id: An optional query parameter to filter by invitation_id
        :param int domain_id: An optional query parameter to filter by domain_id
        :param int role_id: An optional query parameter to filter by role_id
        :return: list[InvitationDomainRole]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invitationdomainrole_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.invitationdomainrole_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def invitationdomainrole_list_with_http_info(self, **kwargs):  # noqa: E501
        """invitationdomainrole_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationdomainrole_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str invitation_id: An optional query parameter to filter by invitation_id
        :param int domain_id: An optional query parameter to filter by domain_id
        :param int role_id: An optional query parameter to filter by role_id
        :return: list[InvitationDomainRole]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'invitation_id', 'domain_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitationdomainrole_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `invitationdomainrole_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `invitationdomainrole_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `invitationdomainrole_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'invitation_id' in params:
            query_params.append(('invitation_id', params['invitation_id']))  # noqa: E501
        if 'domain_id' in params:
            query_params.append(('domain_id', params['domain_id']))  # noqa: E501
        if 'role_id' in params:
            query_params.append(('role_id', params['role_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/invitationdomainroles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InvitationDomainRole]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitationdomainrole_read(self, invitation_id, domain_id, role_id, **kwargs):  # noqa: E501
        """invitationdomainrole_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationdomainrole_read(invitation_id, domain_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: InvitationDomainRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invitationdomainrole_read_with_http_info(invitation_id, domain_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.invitationdomainrole_read_with_http_info(invitation_id, domain_id, role_id, **kwargs)  # noqa: E501
            return data

    def invitationdomainrole_read_with_http_info(self, invitation_id, domain_id, role_id, **kwargs):  # noqa: E501
        """invitationdomainrole_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationdomainrole_read_with_http_info(invitation_id, domain_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: InvitationDomainRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'domain_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitationdomainrole_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `invitationdomainrole_read`")  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `invitationdomainrole_read`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `invitationdomainrole_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitation_id'] = params['invitation_id']  # noqa: E501
        if 'domain_id' in params:
            path_params['domain_id'] = params['domain_id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/invitationdomainroles/{invitation_id}/{domain_id}/{role_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvitationDomainRole',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitationsiterole_create(self, **kwargs):  # noqa: E501
        """invitationsiterole_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationsiterole_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param InvitationSiteRoleCreate data:
        :return: InvitationSiteRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invitationsiterole_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.invitationsiterole_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def invitationsiterole_create_with_http_info(self, **kwargs):  # noqa: E501
        """invitationsiterole_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationsiterole_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param InvitationSiteRoleCreate data:
        :return: InvitationSiteRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitationsiterole_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/invitationsiteroles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvitationSiteRole',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitationsiterole_delete(self, invitation_id, site_id, role_id, **kwargs):  # noqa: E501
        """invitationsiterole_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationsiterole_delete(invitation_id, site_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :param int site_id: A unique integer value identifying the site. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invitationsiterole_delete_with_http_info(invitation_id, site_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.invitationsiterole_delete_with_http_info(invitation_id, site_id, role_id, **kwargs)  # noqa: E501
            return data

    def invitationsiterole_delete_with_http_info(self, invitation_id, site_id, role_id, **kwargs):  # noqa: E501
        """invitationsiterole_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationsiterole_delete_with_http_info(invitation_id, site_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :param int site_id: A unique integer value identifying the site. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'site_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitationsiterole_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `invitationsiterole_delete`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `invitationsiterole_delete`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `invitationsiterole_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitation_id'] = params['invitation_id']  # noqa: E501
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/invitationsiteroles/{invitation_id}/{site_id}/{role_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitationsiterole_list(self, **kwargs):  # noqa: E501
        """invitationsiterole_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationsiterole_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str invitation_id: An optional query parameter to filter by invitation_id
        :param int site_id: An optional query parameter to filter by site_id
        :param int role_id: An optional query parameter to filter by role_id
        :return: list[InvitationSiteRole]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invitationsiterole_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.invitationsiterole_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def invitationsiterole_list_with_http_info(self, **kwargs):  # noqa: E501
        """invitationsiterole_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationsiterole_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str invitation_id: An optional query parameter to filter by invitation_id
        :param int site_id: An optional query parameter to filter by site_id
        :param int role_id: An optional query parameter to filter by role_id
        :return: list[InvitationSiteRole]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'invitation_id', 'site_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitationsiterole_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `invitationsiterole_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `invitationsiterole_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `invitationsiterole_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'invitation_id' in params:
            query_params.append(('invitation_id', params['invitation_id']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'role_id' in params:
            query_params.append(('role_id', params['role_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/invitationsiteroles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InvitationSiteRole]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invitationsiterole_read(self, invitation_id, site_id, role_id, **kwargs):  # noqa: E501
        """invitationsiterole_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationsiterole_read(invitation_id, site_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :param int site_id: A unique integer value identifying the site. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: InvitationSiteRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.invitationsiterole_read_with_http_info(invitation_id, site_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.invitationsiterole_read_with_http_info(invitation_id, site_id, role_id, **kwargs)  # noqa: E501
            return data

    def invitationsiterole_read_with_http_info(self, invitation_id, site_id, role_id, **kwargs):  # noqa: E501
        """invitationsiterole_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.invitationsiterole_read_with_http_info(invitation_id, site_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str invitation_id: A UUID value identifying the invitation. (required)
        :param int site_id: A unique integer value identifying the site. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: InvitationSiteRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['invitation_id', 'site_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invitationsiterole_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'invitation_id' is set
        if ('invitation_id' not in params or
                params['invitation_id'] is None):
            raise ValueError("Missing the required parameter `invitation_id` when calling `invitationsiterole_read`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `invitationsiterole_read`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `invitationsiterole_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'invitation_id' in params:
            path_params['invitation_id'] = params['invitation_id']  # noqa: E501
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/invitationsiteroles/{invitation_id}/{site_id}/{role_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InvitationSiteRole',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def permission_create(self, **kwargs):  # noqa: E501
        """permission_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.permission_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param PermissionCreate data:
        :return: Permission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.permission_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.permission_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def permission_create_with_http_info(self, **kwargs):  # noqa: E501
        """permission_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.permission_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param PermissionCreate data:
        :return: Permission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method permission_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/permissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Permission',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def permission_delete(self, permission_id, **kwargs):  # noqa: E501
        """permission_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.permission_delete(permission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int permission_id: A unique integer value identifying the permission. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.permission_delete_with_http_info(permission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.permission_delete_with_http_info(permission_id, **kwargs)  # noqa: E501
            return data

    def permission_delete_with_http_info(self, permission_id, **kwargs):  # noqa: E501
        """permission_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.permission_delete_with_http_info(permission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int permission_id: A unique integer value identifying the permission. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['permission_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method permission_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'permission_id' is set
        if ('permission_id' not in params or
                params['permission_id'] is None):
            raise ValueError("Missing the required parameter `permission_id` when calling `permission_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'permission_id' in params:
            path_params['permission_id'] = params['permission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/permissions/{permission_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def permission_list(self, **kwargs):  # noqa: E501
        """permission_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.permission_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param list[int] permission_ids: An optional list of permission ids
        :return: list[Permission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.permission_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.permission_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def permission_list_with_http_info(self, **kwargs):  # noqa: E501
        """permission_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.permission_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param list[int] permission_ids: An optional list of permission ids
        :return: list[Permission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'permission_ids']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method permission_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `permission_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `permission_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `permission_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if ('permission_ids' in params and
                len(params['permission_ids']) < 0):
            raise ValueError("Invalid value for parameter `permission_ids` when calling `permission_list`, number of items must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'permission_ids' in params:
            query_params.append(('permission_ids', params['permission_ids']))  # noqa: E501
            collection_formats['permission_ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Permission]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def permission_read(self, permission_id, **kwargs):  # noqa: E501
        """permission_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.permission_read(permission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int permission_id: A unique integer value identifying the permission. (required)
        :return: Permission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.permission_read_with_http_info(permission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.permission_read_with_http_info(permission_id, **kwargs)  # noqa: E501
            return data

    def permission_read_with_http_info(self, permission_id, **kwargs):  # noqa: E501
        """permission_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.permission_read_with_http_info(permission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int permission_id: A unique integer value identifying the permission. (required)
        :return: Permission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['permission_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method permission_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'permission_id' is set
        if ('permission_id' not in params or
                params['permission_id'] is None):
            raise ValueError("Missing the required parameter `permission_id` when calling `permission_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'permission_id' in params:
            path_params['permission_id'] = params['permission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/permissions/{permission_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Permission',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def permission_update(self, permission_id, **kwargs):  # noqa: E501
        """permission_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.permission_update(permission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int permission_id: A unique integer value identifying the permission. (required)
        :param PermissionUpdate data:
        :return: Permission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.permission_update_with_http_info(permission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.permission_update_with_http_info(permission_id, **kwargs)  # noqa: E501
            return data

    def permission_update_with_http_info(self, permission_id, **kwargs):  # noqa: E501
        """permission_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.permission_update_with_http_info(permission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int permission_id: A unique integer value identifying the permission. (required)
        :param PermissionUpdate data:
        :return: Permission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['permission_id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method permission_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'permission_id' is set
        if ('permission_id' not in params or
                params['permission_id'] is None):
            raise ValueError("Missing the required parameter `permission_id` when calling `permission_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'permission_id' in params:
            path_params['permission_id'] = params['permission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/permissions/{permission_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Permission',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_create(self, **kwargs):  # noqa: E501
        """resource_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param ResourceCreate data:
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_create_with_http_info(self, **kwargs):  # noqa: E501
        """resource_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param ResourceCreate data:
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/resources', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Resource',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_delete(self, resource_id, **kwargs):  # noqa: E501
        """resource_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_delete(resource_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int resource_id: A unique integer value identifying the resource. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_delete_with_http_info(resource_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_delete_with_http_info(resource_id, **kwargs)  # noqa: E501
            return data

    def resource_delete_with_http_info(self, resource_id, **kwargs):  # noqa: E501
        """resource_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_delete_with_http_info(resource_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int resource_id: A unique integer value identifying the resource. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params or
                params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `resource_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_id' in params:
            path_params['resource_id'] = params['resource_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/resources/{resource_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_list(self, **kwargs):  # noqa: E501
        """resource_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str prefix: An optional URN prefix filter
        :param list[int] resource_ids: An optional list of resource ids
        :return: list[Resource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.resource_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def resource_list_with_http_info(self, **kwargs):  # noqa: E501
        """resource_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str prefix: An optional URN prefix filter
        :param list[int] resource_ids: An optional list of resource ids
        :return: list[Resource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'prefix', 'resource_ids']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `resource_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `resource_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `resource_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if ('resource_ids' in params and
                len(params['resource_ids']) < 0):
            raise ValueError("Invalid value for parameter `resource_ids` when calling `resource_list`, number of items must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
        if 'resource_ids' in params:
            query_params.append(('resource_ids', params['resource_ids']))  # noqa: E501
            collection_formats['resource_ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/resources', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Resource]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_read(self, resource_id, **kwargs):  # noqa: E501
        """resource_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_read(resource_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int resource_id: A unique integer value identifying the resource. (required)
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_read_with_http_info(resource_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_read_with_http_info(resource_id, **kwargs)  # noqa: E501
            return data

    def resource_read_with_http_info(self, resource_id, **kwargs):  # noqa: E501
        """resource_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_read_with_http_info(resource_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int resource_id: A unique integer value identifying the resource. (required)
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params or
                params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `resource_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_id' in params:
            path_params['resource_id'] = params['resource_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/resources/{resource_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Resource',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resource_update(self, resource_id, **kwargs):  # noqa: E501
        """resource_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_update(resource_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int resource_id: A unique integer value identifying the resource. (required)
        :param ResourceUpdate data:
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resource_update_with_http_info(resource_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resource_update_with_http_info(resource_id, **kwargs)  # noqa: E501
            return data

    def resource_update_with_http_info(self, resource_id, **kwargs):  # noqa: E501
        """resource_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resource_update_with_http_info(resource_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int resource_id: A unique integer value identifying the resource. (required)
        :param ResourceUpdate data:
        :return: Resource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resource_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params or
                params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `resource_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource_id' in params:
            path_params['resource_id'] = params['resource_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/resources/{resource_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Resource',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_create(self, **kwargs):  # noqa: E501
        """role_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.role_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param RoleCreate data:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.role_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.role_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def role_create_with_http_info(self, **kwargs):  # noqa: E501
        """role_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.role_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param RoleCreate data:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/roles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_delete(self, role_id, **kwargs):  # noqa: E501
        """role_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.role_delete(role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: A unique integer value identifying the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.role_delete_with_http_info(role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.role_delete_with_http_info(role_id, **kwargs)  # noqa: E501
            return data

    def role_delete_with_http_info(self, role_id, **kwargs):  # noqa: E501
        """role_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.role_delete_with_http_info(role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: A unique integer value identifying the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `role_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/roles/{role_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_list(self, **kwargs):  # noqa: E501
        """role_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.role_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param list[int] role_ids: An optional list of role ids
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.role_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.role_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def role_list_with_http_info(self, **kwargs):  # noqa: E501
        """role_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.role_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param list[int] role_ids: An optional list of role ids
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'role_ids']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `role_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `role_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `role_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if ('role_ids' in params and
                len(params['role_ids']) < 0):
            raise ValueError("Invalid value for parameter `role_ids` when calling `role_list`, number of items must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'role_ids' in params:
            query_params.append(('role_ids', params['role_ids']))  # noqa: E501
            collection_formats['role_ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Role]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_read(self, role_id, **kwargs):  # noqa: E501
        """role_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.role_read(role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: A unique integer value identifying the role. (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.role_read_with_http_info(role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.role_read_with_http_info(role_id, **kwargs)  # noqa: E501
            return data

    def role_read_with_http_info(self, role_id, **kwargs):  # noqa: E501
        """role_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.role_read_with_http_info(role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: A unique integer value identifying the role. (required)
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `role_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/roles/{role_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def role_update(self, role_id, **kwargs):  # noqa: E501
        """role_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.role_update(role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: A unique integer value identifying the role. (required)
        :param RoleUpdate data:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.role_update_with_http_info(role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.role_update_with_http_info(role_id, **kwargs)  # noqa: E501
            return data

    def role_update_with_http_info(self, role_id, **kwargs):  # noqa: E501
        """role_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.role_update_with_http_info(role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: A unique integer value identifying the role. (required)
        :param RoleUpdate data:
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `role_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/roles/{role_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roleresourcepermission_create(self, **kwargs):  # noqa: E501
        """roleresourcepermission_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.roleresourcepermission_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param RoleResourcePermissionCreate data:
        :return: RoleResourcePermission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.roleresourcepermission_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.roleresourcepermission_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def roleresourcepermission_create_with_http_info(self, **kwargs):  # noqa: E501
        """roleresourcepermission_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.roleresourcepermission_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param RoleResourcePermissionCreate data:
        :return: RoleResourcePermission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roleresourcepermission_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/roleresourcepermissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleResourcePermission',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roleresourcepermission_list(self, **kwargs):  # noqa: E501
        """roleresourcepermission_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.roleresourcepermission_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param int role_id: An optional query parameter to filter by role_id
        :param int resource_id: An optional resource filter
        :param int permission_id: An optional permission filter
        :return: list[RoleResourcePermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.roleresourcepermission_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.roleresourcepermission_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def roleresourcepermission_list_with_http_info(self, **kwargs):  # noqa: E501
        """roleresourcepermission_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.roleresourcepermission_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param int role_id: An optional query parameter to filter by role_id
        :param int resource_id: An optional resource filter
        :param int permission_id: An optional permission filter
        :return: list[RoleResourcePermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'role_id', 'resource_id', 'permission_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roleresourcepermission_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `roleresourcepermission_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `roleresourcepermission_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `roleresourcepermission_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'role_id' in params:
            query_params.append(('role_id', params['role_id']))  # noqa: E501
        if 'resource_id' in params:
            query_params.append(('resource_id', params['resource_id']))  # noqa: E501
        if 'permission_id' in params:
            query_params.append(('permission_id', params['permission_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/roleresourcepermissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RoleResourcePermission]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def roleresourcepermission_read(self, role_id, resource_id, permission_id, **kwargs):  # noqa: E501
        """roleresourcepermission_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.roleresourcepermission_read(role_id, resource_id, permission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: A unique integer value identifying the role. (required)
        :param int resource_id: A unique integer value identifying the resource. (required)
        :param int permission_id: A unique integer value identifying the permission. (required)
        :return: RoleResourcePermission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.roleresourcepermission_read_with_http_info(role_id, resource_id, permission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.roleresourcepermission_read_with_http_info(role_id, resource_id, permission_id, **kwargs)  # noqa: E501
            return data

    def roleresourcepermission_read_with_http_info(self, role_id, resource_id, permission_id, **kwargs):  # noqa: E501
        """roleresourcepermission_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.roleresourcepermission_read_with_http_info(role_id, resource_id, permission_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int role_id: A unique integer value identifying the role. (required)
        :param int resource_id: A unique integer value identifying the resource. (required)
        :param int permission_id: A unique integer value identifying the permission. (required)
        :return: RoleResourcePermission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_id', 'resource_id', 'permission_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method roleresourcepermission_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `roleresourcepermission_read`")  # noqa: E501
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params or
                params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `roleresourcepermission_read`")  # noqa: E501
        # verify the required parameter 'permission_id' is set
        if ('permission_id' not in params or
                params['permission_id'] is None):
            raise ValueError("Missing the required parameter `permission_id` when calling `roleresourcepermission_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501
        if 'resource_id' in params:
            path_params['resource_id'] = params['resource_id']  # noqa: E501
        if 'permission_id' in params:
            path_params['permission_id'] = params['permission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/roleresourcepermissions/{role_id}/{resource_id}/{permission_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleResourcePermission',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def site_create(self, **kwargs):  # noqa: E501
        """site_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.site_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param SiteCreate data:
        :return: Site
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.site_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.site_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def site_create_with_http_info(self, **kwargs):  # noqa: E501
        """site_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.site_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param SiteCreate data:
        :return: Site
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method site_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/sites', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Site',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def site_delete(self, site_id, **kwargs):  # noqa: E501
        """site_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.site_delete(site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.site_delete_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.site_delete_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def site_delete_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """site_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.site_delete_with_http_info(site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method site_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `site_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{site_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def site_list(self, **kwargs):  # noqa: E501
        """site_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.site_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param list[int] site_ids: An optional list of site ids
        :return: list[Site]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.site_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.site_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def site_list_with_http_info(self, **kwargs):  # noqa: E501
        """site_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.site_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param list[int] site_ids: An optional list of site ids
        :return: list[Site]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'site_ids']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method site_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `site_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `site_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `site_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if ('site_ids' in params and
                len(params['site_ids']) < 0):
            raise ValueError("Invalid value for parameter `site_ids` when calling `site_list`, number of items must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'site_ids' in params:
            query_params.append(('site_ids', params['site_ids']))  # noqa: E501
            collection_formats['site_ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Site]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def site_read(self, site_id, **kwargs):  # noqa: E501
        """site_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.site_read(site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :return: Site
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.site_read_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.site_read_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def site_read_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """site_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.site_read_with_http_info(site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :return: Site
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method site_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `site_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{site_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Site',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def site_update(self, site_id, **kwargs):  # noqa: E501
        """site_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.site_update(site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :param SiteUpdate data:
        :return: Site
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.site_update_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.site_update_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def site_update_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """site_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.site_update_with_http_info(site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :param SiteUpdate data:
        :return: Site
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method site_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `site_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/sites/{site_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Site',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def siterole_create(self, **kwargs):  # noqa: E501
        """siterole_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.siterole_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param SiteRoleCreate data:
        :return: SiteRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.siterole_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.siterole_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def siterole_create_with_http_info(self, **kwargs):  # noqa: E501
        """siterole_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.siterole_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param SiteRoleCreate data:
        :return: SiteRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method siterole_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/siteroles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteRole',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def siterole_delete(self, site_id, role_id, **kwargs):  # noqa: E501
        """siterole_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.siterole_delete(site_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.siterole_delete_with_http_info(site_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.siterole_delete_with_http_info(site_id, role_id, **kwargs)  # noqa: E501
            return data

    def siterole_delete_with_http_info(self, site_id, role_id, **kwargs):  # noqa: E501
        """siterole_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.siterole_delete_with_http_info(site_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method siterole_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `siterole_delete`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `siterole_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/siteroles/{site_id}/{role_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def siterole_list(self, **kwargs):  # noqa: E501
        """siterole_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.siterole_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param int site_id: An optional query parameter to filter by site_id
        :param int role_id: An optional query parameter to filter by role_id
        :return: list[SiteRole]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.siterole_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.siterole_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def siterole_list_with_http_info(self, **kwargs):  # noqa: E501
        """siterole_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.siterole_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param int site_id: An optional query parameter to filter by site_id
        :param int role_id: An optional query parameter to filter by role_id
        :return: list[SiteRole]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'site_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method siterole_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `siterole_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `siterole_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `siterole_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'role_id' in params:
            query_params.append(('role_id', params['role_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/siteroles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SiteRole]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def siterole_read(self, site_id, role_id, **kwargs):  # noqa: E501
        """siterole_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.siterole_read(site_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: SiteRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.siterole_read_with_http_info(site_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.siterole_read_with_http_info(site_id, role_id, **kwargs)  # noqa: E501
            return data

    def siterole_read_with_http_info(self, site_id, role_id, **kwargs):  # noqa: E501
        """siterole_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.siterole_read_with_http_info(site_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: SiteRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method siterole_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `siterole_read`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `siterole_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/siteroles/{site_id}/{role_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteRole',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def siterole_update(self, site_id, role_id, **kwargs):  # noqa: E501
        """siterole_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.siterole_update(site_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :param SiteRoleUpdate data:
        :return: SiteRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.siterole_update_with_http_info(site_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.siterole_update_with_http_info(site_id, role_id, **kwargs)  # noqa: E501
            return data

    def siterole_update_with_http_info(self, site_id, role_id, **kwargs):  # noqa: E501
        """siterole_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.siterole_update_with_http_info(site_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :param SiteRoleUpdate data:
        :return: SiteRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'role_id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method siterole_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `siterole_update`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `siterole_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/siteroles/{site_id}/{role_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteRole',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def userdomainrole_create(self, **kwargs):  # noqa: E501
        """userdomainrole_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.userdomainrole_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param UserDomainRoleCreate data:
        :return: UserDomainRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.userdomainrole_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.userdomainrole_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def userdomainrole_create_with_http_info(self, **kwargs):  # noqa: E501
        """userdomainrole_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.userdomainrole_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param UserDomainRoleCreate data:
        :return: UserDomainRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method userdomainrole_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/userdomainroles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserDomainRole',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def userdomainrole_delete(self, user_id, domain_id, role_id, **kwargs):  # noqa: E501
        """userdomainrole_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.userdomainrole_delete(user_id, domain_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.userdomainrole_delete_with_http_info(user_id, domain_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.userdomainrole_delete_with_http_info(user_id, domain_id, role_id, **kwargs)  # noqa: E501
            return data

    def userdomainrole_delete_with_http_info(self, user_id, domain_id, role_id, **kwargs):  # noqa: E501
        """userdomainrole_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.userdomainrole_delete_with_http_info(user_id, domain_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'domain_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method userdomainrole_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `userdomainrole_delete`")  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `userdomainrole_delete`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `userdomainrole_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'domain_id' in params:
            path_params['domain_id'] = params['domain_id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/userdomainroles/{user_id}/{domain_id}/{role_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def userdomainrole_list(self, **kwargs):  # noqa: E501
        """userdomainrole_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.userdomainrole_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str user_id: An optional query parameter to filter by user_id
        :param int domain_id: An optional query parameter to filter by domain_id
        :param int role_id: An optional query parameter to filter by role_id
        :return: list[UserDomainRole]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.userdomainrole_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.userdomainrole_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def userdomainrole_list_with_http_info(self, **kwargs):  # noqa: E501
        """userdomainrole_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.userdomainrole_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str user_id: An optional query parameter to filter by user_id
        :param int domain_id: An optional query parameter to filter by domain_id
        :param int role_id: An optional query parameter to filter by role_id
        :return: list[UserDomainRole]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'user_id', 'domain_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method userdomainrole_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `userdomainrole_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `userdomainrole_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `userdomainrole_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'domain_id' in params:
            query_params.append(('domain_id', params['domain_id']))  # noqa: E501
        if 'role_id' in params:
            query_params.append(('role_id', params['role_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/userdomainroles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserDomainRole]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def userdomainrole_read(self, user_id, domain_id, role_id, **kwargs):  # noqa: E501
        """userdomainrole_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.userdomainrole_read(user_id, domain_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: UserDomainRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.userdomainrole_read_with_http_info(user_id, domain_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.userdomainrole_read_with_http_info(user_id, domain_id, role_id, **kwargs)  # noqa: E501
            return data

    def userdomainrole_read_with_http_info(self, user_id, domain_id, role_id, **kwargs):  # noqa: E501
        """userdomainrole_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.userdomainrole_read_with_http_info(user_id, domain_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param int domain_id: A unique integer value identifying the domain. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: UserDomainRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'domain_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method userdomainrole_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `userdomainrole_read`")  # noqa: E501
        # verify the required parameter 'domain_id' is set
        if ('domain_id' not in params or
                params['domain_id'] is None):
            raise ValueError("Missing the required parameter `domain_id` when calling `userdomainrole_read`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `userdomainrole_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'domain_id' in params:
            path_params['domain_id'] = params['domain_id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/userdomainroles/{user_id}/{domain_id}/{role_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserDomainRole',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def usersiterole_create(self, **kwargs):  # noqa: E501
        """usersiterole_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersiterole_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param UserSiteRoleCreate data:
        :return: UserSiteRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.usersiterole_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.usersiterole_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def usersiterole_create_with_http_info(self, **kwargs):  # noqa: E501
        """usersiterole_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersiterole_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param UserSiteRoleCreate data:
        :return: UserSiteRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usersiterole_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/usersiteroles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSiteRole',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def usersiterole_delete(self, user_id, site_id, role_id, **kwargs):  # noqa: E501
        """usersiterole_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersiterole_delete(user_id, site_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param int site_id: A unique integer value identifying the site. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.usersiterole_delete_with_http_info(user_id, site_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.usersiterole_delete_with_http_info(user_id, site_id, role_id, **kwargs)  # noqa: E501
            return data

    def usersiterole_delete_with_http_info(self, user_id, site_id, role_id, **kwargs):  # noqa: E501
        """usersiterole_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersiterole_delete_with_http_info(user_id, site_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param int site_id: A unique integer value identifying the site. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'site_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usersiterole_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `usersiterole_delete`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `usersiterole_delete`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `usersiterole_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/usersiteroles/{user_id}/{site_id}/{role_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def usersiterole_list(self, **kwargs):  # noqa: E501
        """usersiterole_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersiterole_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str user_id: An optional query parameter to filter by user_id
        :param int site_id: An optional query parameter to filter by site_id
        :param int role_id: An optional query parameter to filter by role_id
        :return: list[UserSiteRole]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.usersiterole_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.usersiterole_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def usersiterole_list_with_http_info(self, **kwargs):  # noqa: E501
        """usersiterole_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersiterole_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str user_id: An optional query parameter to filter by user_id
        :param int site_id: An optional query parameter to filter by site_id
        :param int role_id: An optional query parameter to filter by role_id
        :return: list[UserSiteRole]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'user_id', 'site_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usersiterole_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `usersiterole_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `usersiterole_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `usersiterole_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'role_id' in params:
            query_params.append(('role_id', params['role_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/usersiteroles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserSiteRole]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def usersiterole_read(self, user_id, site_id, role_id, **kwargs):  # noqa: E501
        """usersiterole_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersiterole_read(user_id, site_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param int site_id: A unique integer value identifying the site. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: UserSiteRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.usersiterole_read_with_http_info(user_id, site_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.usersiterole_read_with_http_info(user_id, site_id, role_id, **kwargs)  # noqa: E501
            return data

    def usersiterole_read_with_http_info(self, user_id, site_id, role_id, **kwargs):  # noqa: E501
        """usersiterole_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersiterole_read_with_http_info(user_id, site_id, role_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param int site_id: A unique integer value identifying the site. (required)
        :param int role_id: A unique integer value identifying the role. (required)
        :return: UserSiteRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'site_id', 'role_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usersiterole_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `usersiterole_read`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `usersiterole_read`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if ('role_id' not in params or
                params['role_id'] is None):
            raise ValueError("Missing the required parameter `role_id` when calling `usersiterole_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501
        if 'role_id' in params:
            path_params['role_id'] = params['role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/usersiteroles/{user_id}/{site_id}/{role_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSiteRole',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    Access Control API

    # The Access Control API  ## Overview The Access Control API is an API exposed to other core components. It uses an API Key in an HTTP header to perform authentication and authorisation.  Most of the API calls facilitates CRUD of the entities defined in the Access Control component. Others calls allows the retrieval of information in a form that is convenient for other components (most notably the Management Layer) to consume.   # noqa: E501

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserWithRoles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'role_ids': 'list[int]'
    }

    attribute_map = {
        'user_id': 'user_id',
        'role_ids': 'role_ids'
    }

    def __init__(self, user_id=None, role_ids=None):  # noqa: E501
        """UserWithRoles - a model defined in Swagger"""  # noqa: E501

        self._user_id = None
        self._role_ids = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if role_ids is not None:
            self.role_ids = role_ids

    @property
    def user_id(self):
        """Gets the user_id of this UserWithRoles.  # noqa: E501


        :return: The user_id of this UserWithRoles.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserWithRoles.


        :param user_id: The user_id of this UserWithRoles.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def role_ids(self):
        """Gets the role_ids of this UserWithRoles.  # noqa: E501


        :return: The role_ids of this UserWithRoles.  # noqa: E501
        :rtype: list[int]
        """
        return self._role_ids

    @role_ids.setter
    def role_ids(self, role_ids):
        """Sets the role_ids of this UserWithRoles.


        :param role_ids: The role_ids of this UserWithRoles.  # noqa: E501
        :type: list[int]
        """

        self._role_ids = role_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserWithRoles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

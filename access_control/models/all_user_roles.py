# coding: utf-8

"""
    Access Control API

    # The Access Control API  ## Overview The Access Control API is an API exposed to other core components. It uses an API Key in an HTTP header to perform authentication and authorisation.  Most of the API calls facilitates CRUD of the entities defined in the Access Control component. Others calls allows the retrieval of information in a form that is convenient for other components (most notably the Management Layer) to consume.   # noqa: E501

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AllUserRoles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'roles_map': 'dict(str, list[int])'
    }

    attribute_map = {
        'user_id': 'user_id',
        'roles_map': 'roles_map'
    }

    def __init__(self, user_id=None, roles_map=None):  # noqa: E501
        """AllUserRoles - a model defined in Swagger"""  # noqa: E501

        self._user_id = None
        self._roles_map = None
        self.discriminator = None

        self.user_id = user_id
        self.roles_map = roles_map

    @property
    def user_id(self):
        """Gets the user_id of this AllUserRoles.  # noqa: E501


        :return: The user_id of this AllUserRoles.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AllUserRoles.


        :param user_id: The user_id of this AllUserRoles.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def roles_map(self):
        """Gets the roles_map of this AllUserRoles.  # noqa: E501

        Domain and site roles  # noqa: E501

        :return: The roles_map of this AllUserRoles.  # noqa: E501
        :rtype: dict(str, list[int])
        """
        return self._roles_map

    @roles_map.setter
    def roles_map(self, roles_map):
        """Sets the roles_map of this AllUserRoles.

        Domain and site roles  # noqa: E501

        :param roles_map: The roles_map of this AllUserRoles.  # noqa: E501
        :type: dict(str, list[int])
        """
        if roles_map is None:
            raise ValueError("Invalid value for `roles_map`, must not be `None`")  # noqa: E501

        self._roles_map = roles_map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllUserRoles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

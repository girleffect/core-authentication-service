# coding: utf-8

"""
    Access Control API

    # The Access Control API  ## Overview The Access Control API is an API exposed to other core components. It uses an API Key in an HTTP header to perform authentication and authorisation.  Most of the API calls facilitates CRUD of the entities defined in the Access Control component. Others calls allows the retrieval of information in a form that is convenient for other components (most notably the Management Layer) to consume.   # noqa: E501

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from access_control.models.role_label import RoleLabel  # noqa: F401,E501


class RoleCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'RoleLabel',
        'requires_2fa': 'bool',
        'description': 'str'
    }

    attribute_map = {
        'label': 'label',
        'requires_2fa': 'requires_2fa',
        'description': 'description'
    }

    def __init__(self, label=None, requires_2fa=True, description=None):  # noqa: E501
        """RoleCreate - a model defined in Swagger"""  # noqa: E501

        self._label = None
        self._requires_2fa = None
        self._description = None
        self.discriminator = None

        self.label = label
        if requires_2fa is not None:
            self.requires_2fa = requires_2fa
        if description is not None:
            self.description = description

    @property
    def label(self):
        """Gets the label of this RoleCreate.  # noqa: E501


        :return: The label of this RoleCreate.  # noqa: E501
        :rtype: RoleLabel
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this RoleCreate.


        :param label: The label of this RoleCreate.  # noqa: E501
        :type: RoleLabel
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def requires_2fa(self):
        """Gets the requires_2fa of this RoleCreate.  # noqa: E501


        :return: The requires_2fa of this RoleCreate.  # noqa: E501
        :rtype: bool
        """
        return self._requires_2fa

    @requires_2fa.setter
    def requires_2fa(self, requires_2fa):
        """Sets the requires_2fa of this RoleCreate.


        :param requires_2fa: The requires_2fa of this RoleCreate.  # noqa: E501
        :type: bool
        """

        self._requires_2fa = requires_2fa

    @property
    def description(self):
        """Gets the description of this RoleCreate.  # noqa: E501


        :return: The description of this RoleCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RoleCreate.


        :param description: The description of this RoleCreate.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
